{
  "name": "googlespell",
  "version": "0.0.4",
  "description": "A node module for the undocumented google spell API",
  "homepage": "http://github.com/tstone/googlespell",
  "keywords": [
    "spell check",
    "spell",
    "google"
  ],
  "author": {
    "name": "Titus Stone",
    "email": "wastingtape@gmail.com",
    "url": "http://typeof.co"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/tstone/googlespell/master/MIT.LICENSE"
    }
  ],
  "dependencies": {
    "xml2js": ">= 0.1.x",
    "request": ">= 2.x.x",
    "underscore": ">= 1.x.x"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/tstone/googlespell.git",
    "web": "http://github.com/tstone/googlespell"
  },
  "main": "src/index.js",
  "engines": {
    "node": ">= 0.6.x"
  },
  "readme": "## UPDATE: Google has canceled the spelling service:\n\nSee:\nhttps://tracker.moodle.org/browse/MDL-38867\n\n\ngooglespell\n===========\n\nA simple node.js module for accessing the (undocumented) Google Toolbar spellchecker API.  It would probably be a good idea to only use this module for personal projects or things that will only have light traffic, as Google could yank acess to that API at any time for any reason.\n\nInstallation\n------------\n\nThe usual...\n\n    npm install googlespell\n\nThen\n\n    var googlespell = require('googlespell');\n\nUsage\n-----\n\n### Initialization\n\n`googlespell` exposes a `Checker` object which will handle doing the spell checking.  It takes one input parameter, `config`;\n\n    var googlespell = require('googlespell');\n    var checker     = new googlespell.Checker(options);\n\n#### Checker Config\n\n    ignoreDupes:    Ignore duplicates. // (default: false)\n    ignoreDigits:   Ignore numbers. // (default: true)\n    ignoreCaps:     Ignore caps. // (default: true)\n    ignoreHtml:     Remove all HTML tags, keeping inner HTML. // (default: true)\n    ignoreCode:     Completely remove all <code> tags. // (default: true)\n    language:       Language to check against. // (default: 'en')\n    threshold:      Filter suggestions based on Google's confidence level. // (default: 0)\n    dictionary:     String (file path) or array of strings (word list)\n\n### Doing the Check\n\nOnce the checker is initialized call the `.check` method.\n\n    Checker.check(text, callback(err, result));\n\nExample:\n\n    var googlespell = require('googlespell');\n    var checker     = new googlespell.Checker({\n        threshold: 1,\n        language: 'en'\n    });\n\n    checker.check('This is an exmaple', function(err, result) {\n        console.log(result);\n    });\n\n### Results\n`googlespell` will return a `Result` object which has an array of suggestions.  Each suggestion contains the following properites:\n\n    confidence -- How confident Google is about this suggestion\n    context -- A snippet of the word within the source string\n    offset -- Position in source string where word is\n    word -- The word Google things is misspelled\n    words -- Suggestions for what that word might be\n\nIn the above example, the suggestion returned would look like this:\n\n    { offset: 12\n      confidence: 1\n      word: 'exmaple',\n      words: [ 'example', 'ex maple', 'ex-maple', 'exampled', 'examples' ],\n      context: 'This is an [exmaple]' }\n\n### Custom/Local Dictionary\n\nIt's possible to have a custom dictionary with domain-specific or user-added words.  The `dictionary` configuration option of checker takes either a path to a file or an array of strings.\n\nFor a dictionary file, the words should be `\\n` terminated, one on each line.\n\nExample:\n\n    var checker = new googlespell.Checker({ dictionary: [ 'js' ]});\n    checker.check('This is written in js.', function(err, result){\n        // result.suggestions === [];\n    });\n\n",
  "readmeFilename": "README.md",
  "gitHead": "ecf1f3990b8955ac522b4f86b79775ff8a1fee25",
  "bugs": {
    "url": "https://github.com/tstone/googlespell/issues"
  },
  "_id": "googlespell@0.0.4",
  "scripts": {},
  "_shasum": "d45a89bfa4f288d7e0068ab5f1bdbe0604e41a55",
  "_from": "googlespell"
}
